.leaderboard-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 40px auto;
  padding: 20px;
  background-color: #ffffcc;
  border-radius: 12px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  width: 80%;
  max-width: 800px;
}

.leaderboard-table {
  width: 100%;
  border-collapse: collapse;
  overflow: hidden; 
}

.leaderboard-table th,
.leaderboard-table td {
  padding: 12px 20px;
  text-align: left;
  border-bottom: 1px solid #ccc;
  font-size: 1rem;
}

.leaderboard-table th {
  background-color: #fff9b1;
  font-weight: 600;
}

.leaderboard-table tr {
  position: relative;
  overflow: hidden; 
}
.leaderboard-table tr::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%; 
  width: 100%;
  height: 100%;
  background: linear-gradient(100deg, transparent, rgba(247, 236, 115, 0.753), transparent);
  transform: skewX(-40deg);
  transition: all 0.3s ease;
}

@keyframes row-shine {
  0% {
      left: -100%;
  }
  100% {
      left: 100%;
  }
}

.leaderboard-table tr:hover::before {
  animation: row-shine 1s ease-in-out forwards; 
}


@media (max-width: 480px) {
  .leaderboard-container {
      width: 90%;
      padding: 15px;
  }

  .leaderboard-table th,
  .leaderboard-table td {
      padding: 10px;
      font-size: 0.9rem;
  }

}
.season-buttons {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
}

.season-button {
  padding: 8px 12px;
  font-size: 0.9rem;
  font-weight: bold;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.season-button.active {
  background-color: green;
  color: white;
}

.season-button.inactive {
  background-color: red;
  color: white;
}

.season-button:hover {
  opacity: 0.8;
}

.leaderboard-table-container {
  position: relative;
  overflow: hidden;
  width: 100%;
  height: auto;
}
@keyframes expand {
  0% {
    transform: scale(0.8);
    opacity: 0;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

@keyframes shrink {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  100% {
    transform: scale(0.8);
    opacity: 0;
  }
}

.leaderboard-table-container.expand {
  animation: expand 0.3s ease-in-out forwards;
}

.leaderboard-table-container.shrink {
  animation: shrink 0.3s ease-in-out forwards;
}

.leaderboard-table-container.transition {
  transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
}

.leaderboard-table-container.right-exit {
  opacity: 0;

}

.leaderboard-table-container.left-exit {
  opacity: 0;
}

.leaderboard-table-container.right-enter {
  opacity: 0;
}

.leaderboard-table-container.left-enter {
  opacity: 0;
}

.leaderboard-table-container.active {
  opacity: 1;
}

.leaderboard-header {
  text-align: center; 
  margin-bottom: 20px;
}

.leaderboard-header h3 {
  margin: 0; 
  font-size: 1.5rem; 
  font-weight: bold;
}

.leaderboard-header p {
  margin: 5px 0 0; 
  font-size: 1rem; 
  color: #666;
}
import React, { useState, useEffect } from "react";
import "./LeaderPage.css";

const LeaderPage = () => {
  const seasonData = {
    1: [
      { name: "Alice", game: "Tic-tac-toe", points: "1200 pts" },
      { name: "Bob", game: "Chess", points: "1100 pts" },
      { name: "Charlie", game: "Sea battle", points: "950 pts" },
    ],
    2: [
      { name: "Denys", game: "Tic-tac-toe", points: "1000 pts" },
      { name: "Ivan", game: "Chess", points: "990 pts" },
      { name: "Vera", game: "Sea battle", points: "880 pts" },
      { name: "Dmytro", game: "Tic-tac-toe", points: "636 pts" },
      { name: "Danil", game: "Chess", points: "500 pts" },
    ],
    3: [
      { name: "Eve", game: "Checkers", points: "750 pts" },
      { name: "Frank", game: "Tic-tac-toe", points: "620 pts" },
      { name: "Grace", game: "Chess", points: "600 pts" },
    ],
  };

  const [activeSeason, setActiveSeason] = useState(2);
  const [leaderboardData, setLeaderboardData] = useState(seasonData[activeSeason]);
  const [transitionClass, setTransitionClass] = useState("active");

  useEffect(() => {
    if (transitionClass === "expanding" || transitionClass === "collapsing") {
      const timer = setTimeout(() => {
        setLeaderboardData(seasonData[activeSeason]);
        setTransitionClass("active");
      }, 500); 
      return () => clearTimeout(timer);
    }
  }, [activeSeason, transitionClass]);

  const handleSeasonChange = (season) => {
    if (season !== activeSeason) {
      setTransitionClass("shrink");
      setTimeout(() => {
        setActiveSeason(season);
        setLeaderboardData(seasonData[season]);
        setTransitionClass("expand");
      }, 300); // Время должно совпадать с длительностью анимации
    }
  };
  

  return (
    <div className="leaderboard-container">
      <div className="season-buttons">
        {Object.keys(seasonData).map((season) => (
          <button
            key={season}
            className={`season-button ${parseInt(season) === activeSeason ? "active" : "inactive"}`}
            onClick={() => handleSeasonChange(parseInt(season))}
          >
            {season}
          </button>
        ))}
      </div>
      <div className={`leaderboard-table-container ${transitionClass}`}>
  <div className="leaderboard-header">
    <h3>Season {activeSeason}</h3>
    <p>November</p>
  </div>
  <table className="leaderboard-table">
    <thead>
      <tr>
        <th>Name</th>
        <th>Game</th>
        <th>Points</th>
      </tr>
    </thead>
    <tbody>
      {leaderboardData.map((player, index) => (
        <tr key={index}>
          <td>{player.name}</td>
          <td>{player.game}</td>
          <td>{player.points}</td>
        </tr>
      ))}
    </tbody>
  </table>
</div>

    </div>
  );
};

export default LeaderPage;
